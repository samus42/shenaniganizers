type DestinyPlayer {
    name: String
    destinyId: String
    iconPath: String
}

enum PlayerType {
    Destiny,
    Associate
}

type ActivityPlayer {
    name: String
    id: String
    type: String
}

type ActivityOptions {
    canChangeTitle: Boolean
    canSetMaxPlayers: Boolean
}

type Activity {
    id: ID
    game: String
    type: String
    instanceName: String
    activityName: String
    options: ActivityOptions
    imagePath: String
    players: [ActivityPlayer]
    backups: [ActivityPlayer]
    maxPlayers: Int
    date: String
    info: String
    active: Boolean
    version: Int
}

type Role {
    name: String
    type: String
    player: DestinyPlayer
}

type Strategy {
    title: String,
    description: String,
    roles: [Role]
}

type Stage {
    title: String
    description: String
    roles: [Role]
    strategies: [Strategy]
    strategy: Strategy
}

type Raid {
    id: ID
    raidName: String
    instanceName: String
    date: String
    stages: [Stage]
    roster: [DestinyPlayer]
    active: Boolean
    version: Int
}

enum EmoteDirection {
    up,
    down,
    left,
    right
}

type EmoteConfig {
    id: ID
    player: DestinyPlayer
    upEmote: String,
    downEmote: String,
    leftEmote: String,
    rightEmote: String,
    yes: EmoteDirection,
    no: EmoteDirection,
    one: EmoteDirection,
    two: EmoteDirection,
    three: EmoteDirection,
    four: EmoteDirection
}

type Query {
    version: String
    raids: [Raid]
    getRaid(id: ID) : Raid
    listRaids: [Raid]
    userRaidHistory(destinyId: String): [Raid]
    listActivities: [Activity]
    getActivity(id: ID): Activity
    listEmoteConfigs: [EmoteConfig]
    getEmoteConfig(id: String): EmoteConfig
}

input DestinyPlayerInput {
    name: String
    destinyId: String!
    iconPath: String
}

input RoleInput {
    name: String
    type: String
    player: DestinyPlayerInput
}

input StrategyInput {
    title: String
    description: String
    roles: [RoleInput]
}
input StageInput {
    title: String
    description: String
    roles: [RoleInput]
    strategies: [StrategyInput]
    strategy: StrategyInput
}

input RaidInput {
    id: ID
    instanceName: String
    date: String
    raidName: String
    stages: [StageInput]
    roster: [DestinyPlayerInput]
    version: Int
}

input ActivityPlayerInput {
    name: String
    id: String
    type: String
}

input ActivityOptionsInput {
    canChangeTitle: Boolean
    canSetMaxPlayers: Boolean
}

input ActivityInput {
    id: String
    game: String
    type: String
    activityName: String
    instanceName: String
    imagePath: String
    options: ActivityOptionsInput
    players: [ActivityPlayerInput]
    backups: [ActivityPlayerInput]
    maxPlayers: Int
    date: String
    info: String
    version: Int
}

input EmoteConfigInput {
    id: ID
    player: DestinyPlayerInput!
    upEmote: String,
    downEmote: String,
    leftEmote: String,
    rightEmote: String,
    yes: EmoteDirection,
    no: EmoteDirection,
    one: EmoteDirection,
    two: EmoteDirection,
    three: EmoteDirection,
    four: EmoteDirection
}

type Mutation {
    saveRaid(raid: RaidInput!) : Raid
    saveActivity(activity: ActivityInput!): Activity
    archiveRaid(id: ID!): Raid
    archiveActivity(id: ID!): Activity
    saveEmoteConfig(emoteConfig: EmoteConfigInput!): EmoteConfig
}